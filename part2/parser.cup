/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    void print(String s)
    {
        System.out.println(s);
    }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, CONCAT, PREFIX, SUFFIX, IF, ELSE, LPAREN, RPAREN, LBRACKET, RBRACKET, RETURN, COMMA;
terminal String     STRING_LITERAL, ID;

/*  Non terminals */
non terminal            start_prog;
non terminal String     expr, expr_list, logic_expr, if_expr, funct_decl, plain_expr, main_prog;
non terminal String     funct_list, argu_list, funct_call;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
precedence left ID;
precedence left CONCAT, PREFIX, SUFFIX;
precedence left IF;

/**
 *  The Grammar Rules
 */

//program starts with declaration of functions and then the main function from the user, but prints them backwards
start_prog ::= funct_list:f main_prog:main   {:
                  print("\n\npublic class Main {");
                  print(String.format("\t%s\n\t%s\n}", main, f));
                  :}
             ;

//for declaration of functions only
funct_list ::= funct_list:rest funct_decl:d  {: RESULT = String.format("%s\n\t%s\n", rest, d);   :}
              |                              {: RESULT = "";                                     :}
             ;

//main function
main_prog  ::= expr_list:e {:
			    RESULT = String.format("public static void main(String[] args) {\n%s\t\n\t}\n", e);
			    :}
	         ;

expr_list  ::= expr_list:rest expr:e SEMI    {: RESULT = String.format("%s\t\t%s;\n", rest, e);  :}
              |                              {: RESULT = "";                                     :}
             ;

expr       ::= logic_expr:le                 {: RESULT = String.format("System.out.println(%s)",le);   :}
              | if_expr:ie                   {: RESULT = String.format("%s", ie);                :}
              | LPAREN expr:e RPAREN         {: RESULT = String.format("(%s)", e);               :}
              | plain_expr:pe                {: RESULT = String.format("%s", pe);                :}
             ;

logic_expr ::= expr:e1 PREFIX expr:e2        {: RESULT = String.format("%s.isPrefixOf(%s)", e1, e2); :}
              | expr:e1 SUFFIX expr:e2       {: RESULT = String.format("%s.isSuffixOf(%s)", e1, e2); :}
             ;

if_expr    ::= IF LPAREN logic_expr:le RPAREN expr:e1 SEMI ELSE expr:e2
                      {: RESULT = String.format("if (%s)\n\t\t\t%s;\n\t\t else\n\t\t\t%s", le, e1, e2);:}
             ;

funct_decl ::= ID:id LPAREN argu_list:args RPAREN LBRACKET expr_list:e RBRACKET    {:
                RESULT = String.format("public static String %s(%s) {\n%s\n\t}", id, args, e);
                :}
             ;

funct_call ::= ID:id LPAREN argu_list:args RPAREN    {:
                RESULT = String.format("System.out.println(%s(%s))", id, args);
                :}
             ;

argu_list  ::= plain_expr:pe                 {: RESULT = String.format("%s", pe);                :} //single
              | argu_list:rest COMMA plain_expr:pe {: RESULT = String.format("%s, %s", rest, pe);:} //multiple
              | expr:e1 CONCAT  expr:e2      {: RESULT = String.format("%s + %s", e1, e2);       :}
              |                              {: RESULT = "";                                     :} //none
             ;

plain_expr ::= ID:id                         {: RESULT = String.format("%s", id);                :}
              | STRING_LITERAL:s             {: RESULT = String.format("\"%s\"", s);             :}
              | funct_call:fc                {: RESULT = String.format("%s", fc);                :}

             ;

/**
op         ::= CONCAT

logical_op ::= PREFIX
              | SUFFIX

             */