/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.IOException;


/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

        void print(String s) //prints a string
        {
            System.out.println(s);
        }

        void produceOutputFile(String s, String fname) throws IOException //prints s in a new file named fname
        {
            FileWriter writer = new FileWriter(fname);
            writer.write(s);
            writer.close();
        }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};


/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            CONCAT, PREFIX, SUFFIX, LPAREN, RPAREN, IF, ELSE, COMMA, LBRACKET, RBRACKET, PAREN;
terminal String     STRING_LITERAL, ID;

/*  Non terminals */
non terminal           start_prg;
non terminal String    components, main_prog, expr, expr_list, if_expr, logic_expr, funct_decl, funct_call, argu_list, all_expr_list;
non terminal String    decl_argu_list, func_expr_list, funct_expr, id_expr, rest_decl, func_call_no_id, if_expr_func, logic_expr_func;      // used to store evaluated subexpressions


/**
 *  Precedence Declarations
 */
precedence left IF, SUFFIX, PREFIX;
precedence left CONCAT;


/**
 *  The Grammar Rules
 */

/******************************************* start program *******************************************/

start_prg ::= components:c
        {:
            // writes result in standard output and in new file named Main.java
            String result = String.format("public class Main {\n%s\n}", c);
            print('\n'+result);
            produceOutputFile(result, "Main.java");
        :}
    ;

components ::= funct_decl:fdc components:more {: RESULT = String.format("%s\n%s", more, fdc); :} //declarations precede the main program
            | main_prog:m                     {: RESULT = m; :}
	;


/******************************************* main program *******************************************/

main_prog ::= expr:e expr_list:el //main has at least one expression to be valid
        {:
            RESULT = String.format("\tpublic static void main(String[] args) {\n\t\tSystem.out.println(%s);\n%s\t}", e, el);
        :}
	;


/**************** top-level expressions ****************/

expr_list ::= expr_list:rest expr:e           {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", rest, e); :}
             |                                {: RESULT = "";                                                        :}
    ;

expr      ::= expr:e1 CONCAT  expr:e2         {: RESULT = String.format("%s + %s", e1, e2);                          :}
             | expr:e1 PREFIX expr:e2         {: RESULT = String.format("%s.startsWith(%s)", e1, e2);                :}
             | expr:e1 SUFFIX expr:e2         {: RESULT = String.format("%s.endsWith(%s)", e1, e2);                  :}
             | LPAREN expr:e RPAREN           {: RESULT = String.format("(%s)", e);                                  :}
             | if_expr:ie                     {: RESULT = String.format("%s", ie);                                   :}
             | STRING_LITERAL:s               {: RESULT = String.format("\"%s\"", s);                                :}
             | funct_call:fc                  {: RESULT = fc;                                                        :}
           //| ID:id                          {: RESULT = id;                                                        :}
    ;


/**************** if expressions ****************/

if_expr   ::= IF LPAREN logic_expr:le RPAREN expr:e1 ELSE expr:e2 // w logical expression
        {:
            RESULT = String.format("(%s ? %s : %s)", le, e1, e2); // added parenthesis so that the output is readable
        :}
        | IF LPAREN if_expr:ie RPAREN expr:e1 ELSE expr:e2        // w 2nd if
        {:
            RESULT = String.format("(%s ? %s : %s)", ie, e1, e2);
        :}
    ;

logic_expr ::= expr:e1 PREFIX expr:e2        {: RESULT = String.format("(%s).startsWith(%s)", e1, e2);                 :} //added parenthesis bc its needed sometimes for the correct output
             | expr:e1 SUFFIX expr:e2        {: RESULT = String.format("(%s).endsWith(%s)", e1, e2);                   :}
    ;


/**************** function calls ****************/

funct_call ::= ID:id LPAREN argu_list:args RPAREN
        {:
            RESULT = String.format("%s(%s)", id, args);
        :}
        | ID:id PAREN {: RESULT = id+"()"; :}
    ;

/** arguments for calls. can be any expr **/
argu_list  ::= argu_list:rest COMMA expr:e  {: RESULT = String.format("%s, %s", rest, e);               :} //multiple
              | expr:e                      {: RESULT = String.format("%s", e);                         :} //single
            //|                             {: RESULT = "";                                             :} //none
    ;


/******************************************* function declarations *******************************************/

funct_decl ::= ID:id rest_decl:rest {: RESULT = String.format("\tpublic static String %s(%s", id, rest);      :}
    ;

rest_decl ::= LPAREN decl_argu_list:args RPAREN LBRACKET func_expr_list:e RBRACKET  //with arguments
        {:
            RESULT = String.format("%s) {\n%s\n\t}", args,e);
        :}
              | PAREN LBRACKET func_expr_list:e RBRACKET                            //without arguments
        {:
            RESULT = String.format(") {\n%s\n\t}", e);
        :}
    ;

/** arguments for declarations. include identifiers only **/
decl_argu_list ::= ID:id                        {: RESULT = String.format("String %s", id);                :} //single
              | decl_argu_list:rest COMMA ID:id {: RESULT = String.format("%s, String %s", rest, id);      :} //multiple
            //|                                 {: RESULT = "";                                            :} //none
    ;


/******************************************* declaration function body *******************************************/

func_expr_list ::= funct_expr:e func_expr_list:rest
        {:
            RESULT = String.format("\t\tSystem.out.println(%s);\n%s", e, rest);
        :}
              | funct_expr:single
        {:  RESULT = String.format("\t\treturn %s;", single); :} //function declaration must include at least 1 expr
    ;

//any expr and IDs
funct_expr ::= funct_expr:e1 CONCAT  funct_expr:e2      {: RESULT = String.format("%s + %s", e1, e2);                :}
             | funct_expr:e1 PREFIX funct_expr:e2       {: RESULT = String.format("%s.startsWith(%s)", e1, e2);      :}
             | funct_expr:e1 SUFFIX funct_expr:e2       {: RESULT = String.format("%s.endsWith(%s)", e1, e2);        :}
             | if_expr_func:ie                          {: RESULT = String.format("%s", ie);                         :}
             | STRING_LITERAL:s                         {: RESULT = String.format("\"%s\"", s);                      :}
             | id_expr:ide                              {: RESULT = ide;                                             :}
    ;

id_expr ::= ID:id func_call_no_id:fc                    {: RESULT = id+fc;                                           :}
            //| ID:id                                     {: RESULT = id;                                              :}
    ;


/** calls in declarations. can include anything **/
func_call_no_id ::= LPAREN all_expr_list:args RPAREN
        {:
           RESULT = String.format("(%s)", args);
        :}
        | PAREN {: RESULT = "()"; :}
        | {: RESULT = "";  /* just id */                             :} //none
    ;

//any expr and IDs
all_expr_list ::= funct_expr:e COMMA all_expr_list:rest
                          {:
                              RESULT = String.format("%s, %s", e, rest);
                          :}
                                | funct_expr:single
                          {:  RESULT = String.format("%s", single); :} //function declaration must include at least 1 expr
                                | {: RESULT = ""; :}
    ;


/**************** if expressions for declarations ****************/

if_expr_func ::= IF LPAREN logic_expr_func:le RPAREN funct_expr:e1 ELSE funct_expr:e2   // w logical expression
        {:
            RESULT = String.format("(%s ? %s : %s)", le, e1, e2);    // added parenthesis so that the output is readable
        :}
        | IF LPAREN if_expr_func:ie RPAREN funct_expr:e1 ELSE funct_expr:e2             // w 2nd if
        {:
            RESULT = String.format("(%s ? %s : %s)", ie, e1, e2);
        :}
    ;

logic_expr_func ::= funct_expr:e1 PREFIX funct_expr:e2  {: RESULT = String.format("(%s).startsWith(%s)", e1, e2);      :}   //added parenthesis bc its needed sometimes for the correct output
              | funct_expr:e1 SUFFIX funct_expr:e2      {: RESULT = String.format("(%s).endsWith(%s)", e1, e2);        :}
    ;



/**
logic_op ::= PREFIX
              | SUFFIX
    ;

op         ::= CONCAT
    ;
**/