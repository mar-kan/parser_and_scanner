/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    void print(String s)
    {
        System.out.println(s);
    }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, CONCAT, PREFIX, SUFFIX, IF, ELSE, LPAREN, RPAREN;
terminal String     STRING_LITERAL, ID;

/*  Non terminals */
non terminal            program;
non terminal String     expr, expr_list, logic_expr, if_expr;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
precedence left CONCAT, PREFIX, SUFFIX;

/**
 *  The Grammar Rules
 */

program ::= expr_list:e {:
			System.out.println("public class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			System.out.printf("%s", e);
			System.out.println("\t}");
			System.out.println("}");
			 :}
	;

expr_list ::= expr_list:rest expr:e SEMI    {: RESULT = String.format("%s\t\t%s;\n", rest, e);  :}
            |                               {: RESULT = ""; :}
            ;

expr      ::= expr:e1 CONCAT  expr:e2       {: RESULT = String.format("%s + %s", e1, e2);       :}
             | logic_expr:le                {: RESULT = String.format("%s", le);                :}
             | if_expr:ie                   {: RESULT = String.format("%s", ie);                :}
             | LPAREN expr:e RPAREN         {: RESULT = String.format("(%s)", e);               :}
             | STRING_LITERAL:s             {: RESULT = String.format("%s", s);                 :}
             | ID:id                        {: RESULT = String.format("%s", id);                :}
            ;

logic_expr::= expr:e1 PREFIX expr:e2        {: RESULT = String.format("%s.is-prefix-of(%s)", e1, e2); :}
             | expr:e1 SUFFIX expr:e2       {: RESULT = String.format("%s.is-suffix-of(%s)", e1, e2); :}
            ;

if_expr   ::= IF LPAREN logic_expr:le RPAREN
              expr:e1 SEMI ELSE expr:e2     {: RESULT = String.format("if (%s)\n\t\t\t%s;\n\t\telse\n\t\t\t%s", le, e1, e2); :}
            ;

/**
op        ::= CONCAT
             | PREFIX
             | SUFFIX

             */